// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Gallery {
  id              String        @id @default(cuid())
  name            String
  description     String
  year            Int?
  competitionName String?
  awards          String?
  choreographer   String?
  studio          String?
  team            String?
  thumbnailId     Int?
  tags            String        // Stored as JSON string
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  items           GalleryItem[]
}

model GalleryItem {
  id        Int      @id @default(autoincrement())
  type      String   // "image" or "video"
  src       String?  // For images
  videoId   String?  // For videos
  alt       String
  title     String
  gallery   Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  galleryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id                String   @id @default("singleton")
  allowPublicUploads Boolean  @default(false)
  updatedAt         DateTime @updatedAt
}

